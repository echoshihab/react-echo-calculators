{"version":3,"sources":["Input/Input.module.css","Calculate/Calculate.js","Navigation/Navigation.js","Input/Input.js","Result/Result.js","Svco.js","Rvsp.js","Qpqs.js","Pisamr.js","Lapmr.js","Avavti.js","Lavolume.js","Pisams.js","Error.js","mainnav.js","serviceWorker.js","index.js"],"names":["module","exports","align","calculate","props","react_default","a","createElement","type","onClick","click","navigation","Link","to","input","legend","className","styles","error","onChange","unit","result","formula","value","lvotLegend","VTILegend","hrLegend","svLegend","coLegend","svFormula","coFormula","Svco","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnChange","event","id","tester","test","target","fieldIndex","state","fields","findIndex","f","newFields","slice","newField","objectSpread","errorStatus","setState","handleOnClick","newResults","results","some","lvot","parseFloat","lvotVTI","hr","strokeVolume","Math","PI","pow","toFixed","cardiacOutput","resultsFlag","bind","assertThisInitialized","_this2","calcResults","_this$state","map","Result","key","inputfield","field","Input","Navigation","Calculate","Component","trvmaxLegend","ivclegend","sniffLegend","rapressureLegend","rvspLegend","rvspFormula","ChoiceField","fieldLabel","name","option","ReadOnlyField","Rvsp","handleOnSelect","newChoiceFields","choiceFields","newReadOnlyFields","readonlyFields","TR","RA","RVSP","choicefield","choiceField","Rvsp_ChoiceField","readOnlyField","readonlyField","Rvsp_ReadOnlyField","lvotVtiLegend","rvotLegend","rvotVtiLegend","qpLegend","qsLegend","qpqsRatioLegend","qpFormula","qsFormula","qpqsFormula","Qpqs","rvot","qp","qs","qpqs","label","vfrFormula","eroFormula","rvolFormula","unitERO","rLegend","vrLegend","vmaxLegend","vtiLegend","vfrLegend","eroLegend","rvolLegend","Pisamr","r","vr","vmax","vti","vfr","ero","rvol","mrvmaxLegend","sbpLegend","lapLegend","lapFormula","Lapmr","mrVmax","lap","vti1Legend","vti2Legend","avaLegend","avaFormula","cm2Misc","Avavti","vti1","vti2","ava","a1Legend","a2Legend","lengthLegend","lavolumeLegend","lavolFormula","a1Misc","a2Misc","Lavolume","lavol","degree","cmunit","alphaLegend","mvaLegend","mvaFormula","Pisams","alpha","mva","mainError","svcoDesc","rvspDesc","qpqsDesc","pisamrDesc","lapmrDesc","avavtiDesc","lavolumeDesc","pisamsDesc","mainNav","onHoverHandler","linkIndex","links","l","newLink","descFlag","description","desc","onLeaveHandler","link","title","showDesc","linkFields","linkitem","onMouseOver","onMouseLeave","Boolean","window","location","hostname","match","routing","BrowserRouter","basename","process","Switch","Route","exact","path","component","MainNav","MainError","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1daa979.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"align\":\"Input_align__39-it\"};","import React from 'react';\r\n\r\nconst calculate = props => <button type='submit' onClick={props.click}> Calculate </button>\r\n\r\nexport default calculate;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst navigation = () => {\r\n    return (\r\n\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">HOME</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/svco\">SV & CO</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/rvsp\">RVSP</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/qpqs\">Qp/Qs</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/pisamr\">PISA(MR)</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lapmr\">LAP(MR)</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/avavti\">AVA(VTI)</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lavolume\">LA Vol</Link>\r\n            </li>\r\n              <li>\r\n                <Link to=\"/Pisams\">PISA(MS)</Link>\r\n            </li>\r\n        </ul>\r\n\r\n\r\n\r\n        )\r\n}\r\n\r\nexport default navigation;\r\n","import React from 'react';\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = (props) => { return(<tr><td>{props.legend}</td><td> <small className={styles.align}> {props.error} </small><input className={styles.align} type='text' onChange={props.onChange} />\r\n    <span className={styles.align}>{props.unit}</span>\r\n    </td></tr>\r\n    )  };\r\n\r\nexport default input;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst result = (props) => {\r\n    return(\r\n\r\n        <div className='calcResult'>\r\n        <table>\r\n                <tbody>\r\n                    <tr>\r\n                            <td>  <b>{props.legend}: </b> </td>\r\n                            <td> {props.formula} </td>\r\n                            <td> Calculated Value: <b>{props.value}</b> {props.unit} </td>\r\n\r\n\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table> </div>)\r\n\r\n}\r\n\r\n\r\nexport default result;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculate from './Calculate/Calculate';\nimport Navigation from './Navigation/Navigation';\nimport Input from './Input/Input';\nimport Result from './Result/Result';\n\n\n//legends\nconst lvotLegend = <em>Left Ventricular Outflow Tract Diameter (LVOT) </em>\nconst VTILegend =<em> Velocity Time Integral - Subvalvular (VTI) </em>\nconst hrLegend = <em> Heart Rate (HR) </em>\nconst svLegend = <em> Stroke Volume (SV)</em>\nconst coLegend = <em> Cardiac Output (CO) </em>\n\n\n//formulas\nconst svFormula = <em> &pi; x (LVOT/2)<sup>2</sup> x LVOT VTI</em>;\nconst coFormula = <em>SV/HR</em>;\n\n\n\nclass Svco extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfields: [\n            { id: 1, unit: ' cm', error:'', errorStatus: true, value:'', legend: lvotLegend },\n            { id: 2, unit: ' cm', error:'', errorStatus: true, value:'', legend: VTILegend },\n            { id: 3, unit: ' bpm', error:'', errorStatus: true, value: '', legend: hrLegend }\n            ],\n            results: [\n            {id: 4, legend: svLegend , value:'', formula: svFormula, unit:'ml' },\n            {id: 5, legend: coLegend , value:'', formula: coFormula, unit:'ml' }\n            ],\n            resultsFlag: false,\n\t\t};\n\n\tthis.handleOnChange = this.handleOnChange.bind(this);\n    this.handleOnClick = this.handleOnClick.bind(this);\n\n\t}\n\n//handleOnChange displays validation message for all input fields\n\thandleOnChange = (event, id) => {\n\t\tlet tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\n\n        const fieldIndex = this.state.fields.findIndex(f => {\n            return f.id === id;\n        });\n\n        const newFields = this.state.fields.slice();\n        const newField = {...this.state.fields[fieldIndex]};\n\n\t\tif (!tester) {\n\t\t\tnewField.error = <span className='invalid'>Invalid Input</span>;\n            newFields[fieldIndex] = newField;\n            this.setState({fields: newFields});\n\t\t}\n\t\telse {\n            newField.errorStatus = false;\n\t\t\tnewField.error = <span className='valid'>Valid Input</span>;\n            newField.value = event.target.value;\n\t\t\tnewFields[fieldIndex] = newField;\n            this.setState({fields: newFields});\n\n\n\t\t}\n\n\t};\n\n    handleOnClick = () => {\n        const newFields = this.state.fields.slice();\n        const newResults = this.state.results.slice();\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\n        if (errorChecker){\n            return null;\n        }\n        else {\n            const lvot = parseFloat(newFields[0].value);\n            const lvotVTI = parseFloat(newFields[1].value);\n            const hr = parseFloat(newFields[2].value);\n\n            const strokeVolume = (Math.PI * ((lvot/2)**2)* lvotVTI).toFixed(2);\n            const cardiacOutput = ((strokeVolume * hr)).toFixed(2);\n            newResults[0].value = strokeVolume\n            newResults[1].value = cardiacOutput\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\n\n\n\n        }\n\n\n    }\n\n  render() {\n    let calcResults = null;\n    const {fields, resultsFlag, results} = this.state;  //destructuring\n    if (resultsFlag) {\n         calcResults = (\n            <div>\n            {results.map(result =>{\n                return <Result\n                        key = {result.id}\n                        value = {result.value}\n                        formula = {result.formula}\n                        unit = {result.unit}\n                        legend = {result.legend}\n                        />\n\n            })}\n\n\n            </div>\n\n            )\n    }\n    let inputfield = (\n\n    <div className='calcResult'>\n    <table>\n        <tbody>\n    {fields.map(field => {\n        return (\n\n                <Input\n                unit={field.unit}\n                onChange={(event)=>this.handleOnChange(event,field.id)}\n                error = {field.error}\n                key = {field.id}\n                value = {field.value}\n                legend = {field.legend}\n                />\n\n                )\n    } )}\n        </tbody>\n    </table>\n    </div>);\n\n    return (\n      <div className=\"stateComponent\">\n      <Navigation />\n         <b>Stroke Volume(SV) & Cardiac Output(CO) </b>\n         {inputfield}\n         <Calculate click={this.handleOnClick}/>\n         {calcResults}\n      </div>\n    );\n  }\n}\n\n\nexport default Svco;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input'\r\nimport Result from './Result/Result'\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation'\r\n\r\n\r\n//legend\r\nconst trvmaxLegend = <em> Tricupid Regurgitation Peak Velocity (TR Vmax) </em>\r\nconst ivclegend = <em> Inferior Vena Cava Diameter (IVCd) </em>\r\nconst sniffLegend = <em> % of collapsed IVC at sniff (IVC-sniff %) </em>\r\nconst rapressureLegend = <em> Right Atrial Pressure (RAP) </em>\r\nconst rvspLegend = <em> Right Ventricular Systolic Pressure (RVSP) </em>\r\n\r\n//formulas specific to this component\r\nconst rvspFormula = <em> 4 x (TR V<sub>max</sub>)<sup>2</sup> + RA Pressure</em>;\r\n\r\n\r\n\r\nconst ChoiceField = (props) => {\r\n    if (props.fieldLabel=== ivclegend) {\r\n    return(<div>{props.fieldLabel} <select name={props.fieldLabel} onChange={props.onChange}>\r\n                                                               <option value=\"-21\">\r\n                                                                   &#8804;{props.option}\r\n                                                               </option>\r\n                                                               <option value='+21'>\r\n                                                                    &#8805;{props.option}\r\n                                                               </option>\r\n                                    </select>\r\n</div> )}\r\n    else {\r\n        return( <div>{props.fieldLabel} <select name={props.fieldLabel} onChange={props.onChange}>\r\n                                                               <option value=\"+50\"> &gt;{props.option}</option>\r\n                                                               <option value=\"-50\"> &lt;{props.option}</option>\r\n                                                               </select> </div>\r\n            )\r\n\r\n    }\r\n      };\r\n\r\nconst ReadOnlyField = props => <div> {props.fieldLabel}: {props.value} {props.unit}</div>\r\n\r\n\r\n\r\nclass Rvsp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' m/s', error:'', errorStatus: true, value:'', legend:trvmaxLegend },\r\n            ],\r\n            choiceFields: [\r\n            { id: 2, option: '21mm ', value:'-21', legend: ivclegend},\r\n            { id: 3, option: '50%' , value:'+50', legend: sniffLegend}\r\n            ],\r\n            readonlyFields: [\r\n            { id: 4, unit: 'mmhg', error:'', errorStatus:true,  value: 3 , legend: rapressureLegend }\r\n            ],\r\n            results: [\r\n            {id: 5, value:'', formula: rvspFormula, unit: 'mmhg', legend: rvspLegend},\r\n            ],\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n    this.handleOnSelect = this.handleOnSelect.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n     handleOnSelect = (event, id) => {\r\n        const newChoiceFields = this.state.choiceFields.slice();\r\n        const newReadOnlyFields = this.state.readonlyFields.slice();\r\n        if (id === 2) {\r\n            newChoiceFields[0].value = event.target.value\r\n        }\r\n        else {\r\n            newChoiceFields[1].value = event.target.value\r\n        }\r\n         this.setState({choiceFields:newChoiceFields});\r\n\r\n        switch (true) {\r\n            case (newChoiceFields[0].value === '-21' && newChoiceFields[1].value === '+50'):\r\n                newReadOnlyFields[0].value = 3\r\n                break;\r\n            case (newChoiceFields[0].value === '-21' && newChoiceFields[1].value === '-50'):\r\n                newReadOnlyFields[0].value = 8\r\n                break;\r\n            case (newChoiceFields[0].value === '+21' && newChoiceFields[1].value === '+50'):\r\n                newReadOnlyFields[0].value = 8\r\n                break;\r\n            case (newChoiceFields[0].value === '+21' && newChoiceFields[1].value === '-50'):\r\n                newReadOnlyFields[0].value = 15\r\n                break;\r\n            default:\r\n                newReadOnlyFields[0].value = 3\r\n        }\r\n        this.setState({readonlyFields:newReadOnlyFields});\r\n\r\n     };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newReadOnlyFields = this.state.readonlyFields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n            const TR = parseFloat(newFields[0].value);\r\n            const RA = newReadOnlyFields[0].value;\r\n            const RVSP = 4*(TR**2)+RA\r\n            newResults[0].value = RVSP;\r\n            this.setState({results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results, choiceFields, readonlyFields} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n     let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n        let choicefield = (\r\n    <div className='calcResult'>\r\n    {choiceFields.map(choiceField => {\r\n        return (\r\n\r\n                <ChoiceField\r\n                fieldLabel={choiceField.legend}\r\n                onChange = {(event)=>this.handleOnSelect(event,choiceField.id)}\r\n                option={choiceField.option}\r\n                error = {choiceField.error}\r\n                key = {choiceField.id}\r\n                value = {choiceField.value}\r\n                />\r\n\r\n                )\r\n    } )}\r\n    </div>);\r\n\r\n\r\n    let readOnlyField = (\r\n    <div className='calcResult'>\r\n    {readonlyFields.map(readonlyField => {\r\n        return (\r\n\r\n                <ReadOnlyField\r\n                fieldLabel={readonlyField.legend}\r\n                key = {readonlyField.id}\r\n                value = {readonlyField.value}\r\n                unit = {readonlyField.unit}\r\n                />\r\n\r\n                )\r\n    } )}\r\n    </div>);\r\n\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b> Right Ventricle Systolic Pressure (RVSP)  </b>\r\n         {inputfield}\r\n         {choicefield}\r\n         {readOnlyField}\r\n        <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Rvsp;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation';\r\n\r\n//legend\r\nconst lvotLegend = <em> Left Ventricular Outflow Tract Diameter (LVOT) </em>\r\nconst lvotVtiLegend = <em> LVOT Velocity Time Integral (LVOT VTI) </em>\r\nconst rvotLegend = <em> Right Ventricular Outflow Tract Diameter (RVOT)</em>\r\nconst rvotVtiLegend =<em> RVOT Velocity Time Integral (RVOT VTI)</em>\r\nconst qpLegend =  <em> Pulmonary Flow (Qp)</em>\r\nconst qsLegend = <em> Systemic Flow (Qs)</em>\r\nconst qpqsRatioLegend = <em> Magnitude of cardiovascular shunt (Qp/Qs)</em>\r\n\r\n//formulas\r\nconst qpFormula = <em> RVOT VTI x &pi; x (RVOT/2)<sup>2</sup></em>;\r\nconst qsFormula = <em> LVOT VTI x &pi; x (LVOT/2)<sup>2</sup></em>;\r\nconst qpqsFormula = <em> Qp/Qs </em>;\r\n\r\n\r\nclass Qpqs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' cm', error:'', errorStatus: true, value:'', legend: lvotLegend},\r\n            { id: 2, unit: ' cm', error:'', errorStatus: true, value:'', legend: lvotVtiLegend},\r\n            { id: 3, unit: ' cm', error:'', errorStatus: true, value:'', legend: rvotLegend},\r\n            { id: 4, unit: ' cm', error:'', errorStatus: true, value: '', legend: rvotVtiLegend}\r\n            ],\r\n            results: [\r\n            {id: 5, label: 'Qp', value:'', formula: qpFormula, unit:'' , legend: qpLegend},\r\n            {id: 6, label: 'Qs', value:'', formula: qsFormula, unit:'' , legend: qsLegend},\r\n            {id: 7, label: 'Qp/Qs Ratio', value:'', formula: qpqsFormula, unit:'', legend: qpqsRatioLegend },\r\n\r\n            ],\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n            const lvot = parseFloat(newFields[0].value);\r\n            const lvotVTI = parseFloat(newFields[1].value);\r\n            const rvot = parseFloat(newFields[2].value);\r\n            const rvotVTI = parseFloat(newFields[3].value);\r\n\r\n            const qp = (rvotVTI* Math.PI * ((rvot/2)**2)).toFixed(2);\r\n            const qs = (lvotVTI* Math.PI * ((lvot/2)**2)).toFixed(2);\r\n            const qpqs = (qp/qs).toFixed(2);\r\n            newResults[0].value = qp;\r\n            newResults[1].value = qs;\r\n            newResults[2].value = qpqs\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b>Shunt Ratio (Qp/Qs) </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Qpqs;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation'\r\n\r\n//formulas specific to this component\r\nconst vfrFormula = <em>2 x &pi; x r<sup>2</sup> x V<sub>r</sub></em>;\r\nconst eroFormula = <em>VFR/V<sub>max</sub></em>;\r\nconst rvolFormula = <em> ERO x VTI </em>;\r\nconst unitERO = <span>mm<sup>2</sup></span>\r\n\r\n//legends specific to this component\r\nconst rLegend = <em>Mitral Regurgitation Radius (r)</em>;\r\nconst vrLegend = <em>Aliasing Velocity at r (Vr)</em>;\r\nconst vmaxLegend = <em>Peak Mitral Regurgitation Velocity (Vmax)</em>;\r\nconst vtiLegend = <em>Mitral Regurgitation Velocity Time Integral (VTI)</em>;\r\nconst vfrLegend = <em>Volume Flow Rate (VFR)</em>;\r\nconst eroLegend = <em>Effective Regurgitant Orifice (ERO)</em>;\r\nconst rvolLegend = <em>Regurgitant Volume (RVOL)</em>;\r\n\r\n\r\n\r\n\r\nclass Pisamr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' cm', error:'', errorStatus: true, value:'', legend: rLegend},\r\n            { id: 2, unit: ' cm/s', error:'', errorStatus: true, value:'', legend: vrLegend},\r\n            { id: 3, unit: ' cm/s', error:'', errorStatus: true, value: '', legend: vmaxLegend},\r\n            { id: 4, unit: ' cm', error:'', errorStatus: true, value: '', legend: vtiLegend},\r\n            ],\r\n            results: [\r\n            {id: 4, value:'', formula: vfrFormula, unit:'mL/s', legend: vfrLegend },\r\n            {id: 5, value:'', formula: eroFormula, unit:unitERO, legend: eroLegend },\r\n            {id: 6, value:'', formula: rvolFormula, unit:'mL/beat', legend: rvolLegend}\r\n            ],\r\n\r\n\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n\r\n            const r = parseFloat(newFields[0].value);\r\n            const vr = parseFloat(newFields[1].value);\r\n            const vmax = parseFloat(newFields[2].value);\r\n            const vti = parseFloat(newFields[3].value);\r\n\r\n            const vfr = (2 * Math.PI * ((r)**2)* vr).toFixed(2);\r\n            const ero = (vfr/vmax).toFixed(2);\r\n            const rvol = (ero*vti).toFixed(2);\r\n\r\n            newResults[0].value = vfr;\r\n            newResults[1].value = ero;\r\n            newResults[2].value = rvol;\r\n\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n        <Navigation />\r\n         <b>Quantification of Mitral Regurgitation (MR) via Proximal Isovelicty Surface Area(PISA) </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Pisamr;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation'\r\n\r\n\r\n//legends\r\nconst mrvmaxLegend = <em> Mitral Regurgitation Peak Velocity (MR Vmax) </em>\r\nconst sbpLegend = <em> Systolic Blood Pressure (SBP) </em>\r\nconst lapLegend = <em> Left Atrial Pressure (LAP) </em>\r\n\r\n\r\n//formula\r\nconst lapFormula = <em> SBP - 4(MRV<sub>Max</sub>)<sup>2</sup></em>;\r\n\r\n\r\n\r\n\r\nclass Lapmr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' m/s' , error:'', errorStatus: true, value:'', legend: mrvmaxLegend},\r\n            { id: 2, unit: ' mmHG', error:'', errorStatus: true, value:'', legend: sbpLegend},\r\n            ],\r\n            results: [\r\n            {id: 3, value:'', formula: lapFormula, unit:'mmHG', legend: lapLegend },\r\n            ],\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n            const mrVmax = parseFloat(newFields[0].value);\r\n            const sbp = parseFloat(newFields[1].value);\r\n\r\n            const lap = sbp - 4*(mrVmax)**2\r\n            newResults[0].value = lap;\r\n\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n     let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b>Left Atrial Pressure(LAP) in presence of Mitral Regurgitation(MR) </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Lapmr;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation'\r\n\r\n\r\n//legends\r\nconst vti1Legend = <em> Velocity Time Integral - Subvalvular (VTI 1) </em>\r\nconst vti2Legend = <em> Velocity Time Integral - Across Valve (VTI 2) </em>\r\nconst lvotLegend = <em> Left Ventricular Outflow Tract Diameter (LVOT) </em>\r\nconst avaLegend = <em> Aortic Valve Area (AVA) </em>\r\n\r\n\r\n//formulas\r\nconst avaFormula = <em> (&pi; x (LVOT/2)<sup>2</sup> x VTI<sub>1</sub>)/VTI<sub>2</sub></em>;\r\n\r\n//misc html entities\r\n//const vti1Misc = <span>VTI<sub>1</sub>(cm)</span>\r\n//const vti2Misc = <span>VTI<sub>2</sub>(cm)</span>\r\nconst cm2Misc = <span>cm<sup>2</sup></span>\r\n\r\n\r\n\r\n\r\nclass Avavti extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' cm', error:'', errorStatus: true, value:'',  legend: vti1Legend },\r\n            { id: 2, unit: ' cm', error:'', errorStatus: true, value:'', legend: vti2Legend },\r\n            { id: 3, unit: ' cm', error:'', errorStatus: true, value: '', legend: lvotLegend}\r\n            ],\r\n            results: [\r\n            {id: 4, value:'', formula: avaFormula, unit: cm2Misc, legend: avaLegend },\r\n            ],\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n            const vti1 = parseFloat(newFields[0].value);\r\n            const vti2 = parseFloat(newFields[1].value);\r\n            const lvot = parseFloat(newFields[2].value);\r\n\r\n            const ava = ((Math.PI * ((lvot/2)**2)* vti1)/vti2).toFixed(2);\r\n\r\n            newResults[0].value = ava\r\n\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b>Aortic Valve Area(AVA) using Velocity Time Integrals(VTI) </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Avavti;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation';\r\n\r\n\r\n\r\n\r\n//legends\r\nconst a1Legend = <em> LA area in A4C Planimetry (A<sub>1</sub>) </em>\r\nconst a2Legend = <em> LA area in A2C Planimetry (A<sub>2</sub>) </em>\r\nconst lengthLegend = <em> Length (L) </em>\r\nconst lavolumeLegend = <em> Left Atrial Volume (LA Vol) </em>\r\n\r\n\r\n//formulas specific to this component\r\nconst lavolFormula = <em> .85 x (A<sub>1</sub>x A<sub>2</sub>)/Length</em>\r\n\r\n//misc html entities\r\nconst a1Misc = <span> cm<sup>2</sup></span>\r\nconst a2Misc = <span> cm<sup>2</sup></span>\r\n\r\n\r\nclass Lavolume extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: a1Misc, error:'', errorStatus: true, value:'', legend: a1Legend},\r\n            { id: 2, unit: a2Misc, error:'', errorStatus: true, value:'', legend: a2Legend},\r\n            { id: 3, unit: ' cm', error:'', errorStatus: true, value: '', legend: lengthLegend}\r\n            ],\r\n            results: [\r\n            {id: 4, legend: lavolumeLegend, value:'', formula: lavolFormula, unit:'mL' },\r\n            ],\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n            const a1 = parseFloat(newFields[0].value);\r\n            const a2 = parseFloat(newFields[1].value);\r\n            const lalength = parseFloat(newFields[2].value);\r\n\r\n            const lavol = (.85 * (a1 * a2)/lalength).toFixed(2);\r\n            newResults[0].value = lavol\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b>Left Atrial (LA) Volume </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Lavolume;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Input from './Input/Input';\r\nimport Result from './Result/Result';\r\nimport Calculate from './Calculate/Calculate';\r\nimport Navigation from './Navigation/Navigation'\r\n\r\n\r\n//html entities specific to this component\r\n//const alphadegree = <span> &alpha; &#x2da; </span>\r\nconst degree = <span>  &#x2da; </span>\r\nconst cmunit = <span> cm<sup>2</sup></span>\r\n\r\n//legends specific to this component\r\nconst rLegend = <em>PISA Radius (r)</em>;\r\nconst vrLegend = <em>Aliasing Velocity at r (Vr)</em>;\r\nconst vmaxLegend = <em>Peak Mitral Stenosis Velocity (Vmax)</em>;\r\nconst alphaLegend = <em>Angle between Mitral Valve Leaflets (&alpha;) </em>;\r\nconst mvaLegend = <em>Mitral Valve Area(MVA)</em>;\r\n\r\n\r\n//formulas specific to this component\r\nconst mvaFormula = <em>2 x &pi; x r<sup>2</sup> x (V<sub>r</sub>/V<sub>max</sub>) x &alpha; &#x2da;/ 180 &#x2da;</em>;\r\n\r\n\r\n\r\nclass Pisams extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: [\r\n            { id: 1, unit: ' cm', error:'', errorStatus: true, value:'', legend: rLegend},\r\n            { id: 2, unit: ' cm/s', error:'', errorStatus: true, value:'', legend: vrLegend},\r\n            { id: 3, unit: ' cm/s', error:'', errorStatus: true, value: '', legend: vmaxLegend},\r\n            { id: 4, unit: degree, error:'', errorStatus: true, value: '', legend: alphaLegend},\r\n            ],\r\n            results: [\r\n            {id: 5, value:'', formula: mvaFormula, unit: cmunit, legend: mvaLegend  },\r\n            ],\r\n\r\n            resultsFlag: false,\r\n        };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n\r\n    }\r\n\r\n//handleOnChange displays validation message for all input fields\r\n    handleOnChange = (event, id) => {\r\n        let tester= /^(?=.)([+-]?([0-9]*)(\\.([0-9]+))?)$/.test(event.target.value)\r\n\r\n        const fieldIndex = this.state.fields.findIndex(f => {\r\n            return f.id === id;\r\n        });\r\n\r\n        const newFields = this.state.fields.slice();\r\n        const newField = {...this.state.fields[fieldIndex]};\r\n\r\n        if (!tester) {\r\n            newField.error = <span className='invalid'>Invalid Input</span>;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n        }\r\n        else {\r\n            newField.errorStatus = false;\r\n            newField.error = <span className='valid'>Valid Input</span>;\r\n            newField.value = event.target.value;\r\n            newFields[fieldIndex] = newField;\r\n            this.setState({fields: newFields});\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n    handleOnClick = () => {\r\n        const newFields = this.state.fields.slice();\r\n        const newResults = this.state.results.slice();\r\n        const errorChecker = newFields.some((newField) => newField.errorStatus === true);\r\n        if (errorChecker){\r\n            return null;\r\n        }\r\n        else {\r\n\r\n            const r = parseFloat(newFields[0].value);\r\n            const vr = parseFloat(newFields[1].value);\r\n            const vmax = parseFloat(newFields[2].value);\r\n            const alpha = parseFloat(newFields[3].value);\r\n\r\n            const mva = ((2 * Math.PI * (r**2))* (vr/vmax)*(alpha/180)).toFixed(2);\r\n\r\n\r\n            newResults[0].value = mva;\r\n\r\n\r\n            this.setState({fields: newFields, results:newResults, resultsFlag: true});\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render() {\r\n    let calcResults = null;\r\n    const {fields, resultsFlag, results} = this.state;  //destructuring\r\n    if (resultsFlag) {\r\n         calcResults = (\r\n            <div>\r\n            {results.map(result =>{\r\n                return <Result\r\n                        key = {result.id}\r\n                        value = {result.value}\r\n                        formula = {result.formula}\r\n                        unit = {result.unit}\r\n                        legend = {result.legend}\r\n                        />\r\n\r\n            })}\r\n\r\n\r\n            </div>\r\n\r\n            )\r\n    }\r\n    let inputfield = (\r\n\r\n    <div className='calcResult'>\r\n    <table>\r\n        <tbody>\r\n    {fields.map(field => {\r\n        return (\r\n\r\n                <Input\r\n                unit={field.unit}\r\n                onChange={(event)=>this.handleOnChange(event,field.id)}\r\n                error = {field.error}\r\n                key = {field.id}\r\n                value = {field.value}\r\n                legend = {field.legend}\r\n                />\r\n\r\n                )\r\n    } )}\r\n        </tbody>\r\n    </table>\r\n    </div>);\r\n\r\n    return (\r\n      <div className=\"stateComponent\">\r\n      <Navigation />\r\n         <b>Quantification of Mitral Stenosis(MS) via Proximal Isovelicty Surface Area(PISA) </b>\r\n         {inputfield}\r\n         <Calculate click={this.handleOnClick}/>\r\n         {calcResults}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Pisams;\r\n","import React from \"react\";\r\n\r\nconst mainError = () => {\r\n    return (\r\n        <div>\r\n        <p>Error: Path not found </p>\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default mainError;\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\n\r\nconst svcoDesc = <em>Stroke Volume(SV) & Cardiac Output(CO)</em>;\r\nconst rvspDesc = <em>Right Ventricle Systolic Pressure (RVSP)</em>;\r\nconst qpqsDesc = <em>Shunt Ratio (Qp/Qs)</em>;\r\nconst pisamrDesc = <em>Quantification of Mitral Regurgitation (MR) via Proximal Isovelicty Surface Area(PISA)</em>;\r\nconst lapmrDesc = <em>Left Atrial Pressure(LAP) in presence of Mitral Regurgitation(MR)</em>;\r\nconst avavtiDesc = <em>Aortic Valve Area(AVA) using Velocity Time Integrals(VTI)</em>;\r\nconst lavolumeDesc = <em>Left Atrial (LA) Volume</em>;\r\nconst pisamsDesc = <em>Quantification of Mitral Stenosis(MS) via Proximal Isovelicty Surface Area(PISA)</em>;\r\n\r\n\r\n//links for main home page\r\nclass mainNav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            links: [\r\n            { id: 1, link: '/svco', title:'SV & CO', desc: svcoDesc},\r\n            { id: 2, link: '/rvsp', title: 'RVSP', desc: rvspDesc },\r\n            { id: 3, link: '/qpqs', title: 'Qp/Qs', desc:qpqsDesc},\r\n            { id: 4, link: '/pisamr', title: 'PISA(MR)', desc: pisamrDesc },\r\n            { id: 5, link: '/lapmr',   title: 'LAP(MR)', desc: lapmrDesc},\r\n            { id: 6, link: '/avavti',  title: 'AVA(VTI)', desc:avavtiDesc},\r\n            { id: 7, link: '/lavolume',title: 'LA Vol', desc:lavolumeDesc},\r\n            { id: 8, link: '/pisams', title: 'PISA(MS)', desc:pisamsDesc}\r\n            ],\r\n            descFlag: false ,\r\n            description : ''     \r\n        };\r\n\r\n        this.onHoverHandler = this.onHoverHandler.bind(this);\r\n        this.onLeaveHandler = this.onLeaveHandler.bind(this);\r\n    }\r\n\r\n    onHoverHandler = (id) => {\r\n        const linkIndex = this.state.links.findIndex(l => {\r\n            return l.id === id;\r\n        });\r\n        const newLink = {...this.state.links[linkIndex]};\r\n        this.setState({descFlag: true, description: newLink.desc});\r\n\r\n    }\r\n\r\n    onLeaveHandler = () => {\r\n        this.setState({descFlag: false})\r\n\r\n    }\r\n\r\n    render(){\r\n        let showDesc = null;\r\n        const {links, descFlag, description} = this.state;  //destructuring\r\n\r\n        if (descFlag) {\r\n            showDesc = description; \r\n        }\r\n        else {\r\n            showDesc = '';\r\n        }\r\n\r\n        let linkFields = links.map(linkitem =>{\r\n                    return <Link\r\n                             to={linkitem.link}\r\n                             onMouseOver={()=>this.onHoverHandler(linkitem.id)}\r\n                             onMouseLeave= {this.onLeaveHandler}\r\n                             key={linkitem.id}\r\n                            >\r\n                            {linkitem.title}\r\n                            </Link>\r\n\r\n                });\r\n\r\n\r\n\r\n        return (\r\n        <span>\r\n        <h2>Cardiac Ultrasound/Echocardiography Calculators</h2>\r\n      \r\n        <table className=\"center\">\r\n            <tbody>\r\n            <tr>\r\n                <td> {linkFields[0]}</td>\r\n                <td> {linkFields[1]} </td>\r\n            </tr>\r\n            <tr>\r\n            <td>  {linkFields[2]} </td>\r\n                <td> {linkFields[3]} </td>\r\n            </tr>\r\n            <tr>\r\n                <td> {linkFields[4]}</td>\r\n                <td> {linkFields[5]} </td>\r\n            </tr>\r\n            <tr>\r\n                <td> {linkFields[6]} </td>\r\n                <td> {linkFields[7]} </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n        <h4> {showDesc} </h4>\r\n        </span>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default mainNav;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Route, Switch, BrowserRouter as Router} from 'react-router-dom'\nimport Svco from './Svco';\nimport Rvsp from './Rvsp';\nimport Qpqs from './Qpqs';\nimport Pisamr from './Pisamr';\nimport Lapmr from './Lapmr';\nimport Avavti from './Avavti';\nimport Lavolume from './Lavolume';\nimport Pisams from './Pisams';\nimport MainError from './Error';\nimport MainNav from './mainnav';\nimport * as serviceWorker from './serviceWorker';\n\n//how do i have a different navigation option in other pages.\nconst routing = (\n<Router basename={process.env.PUBLIC_URL}>\n    <div className='router'>\n\n        <Switch>\n        <Route exact path =\"/\" component={MainNav} />\n        <Route path=\"/svco\" component={Svco} />\n        <Route path=\"/rvsp\" component={Rvsp} />\n        <Route path=\"/qpqs\" component={Qpqs} />\n        <Route path=\"/pisamr\" component={Pisamr} />\n        <Route path=\"/lapmr\" component={Lapmr} />\n        <Route path=\"/avavti\" component={Avavti} />\n        <Route path=\"/Lavolume\" component={Lavolume} />\n        <Route path=\"/pisams\" component={Pisams} />\n        <Route component={MainError} />\n        </Switch>\n    </div>\n</Router>\n\n    )\n\nReactDOM.render(routing , document.getElementById('root'));\n\nif (module.hot) {\n\tmodule.hot.accept();\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}